#lang racket/base

(require racket/mpair)
(require rackunit)

(define (make-queue)
  (let ((front-ptr null)
        (rear-ptr null))
    (define (empty?)
      (null? front-ptr))
    (define (front)
      (if (null? front-ptr)
          (error "FRONT called with an empty queue")
          (mcar front-ptr)))
    (define (insert! item)
      (let ((new-pair (mcons item null)))
        (if (empty?)
            (begin
              (set! front-ptr new-pair)
              (set! rear-ptr new-pair))
            (begin
              (set-mcdr! rear-ptr new-pair)
              (set! rear-ptr new-pair)))))
    (define (delete!)
      (if (empty?)
          (error "DELETE called with an empty queue")
          (set! front-ptr (mcdr front-ptr))))
    (define (dispatch m)
      (cond
        ((eq? m 'empty?) (empty?))
        ((eq? m 'front) (front))
        ((eq? m 'insert!) insert!)
        ((eq? m 'delete!) delete!)
        (else (error "Undefined operation with queue" m))))
    dispatch))

(define q (make-queue))
(check-true (q 'empty?))
((q 'insert!) 1)
((q 'insert!) 2)
(check-false (q 'empty?))
(check-eq? (q 'front) 1)
((q 'delete!))
(check-eq? (q 'front) 2)
